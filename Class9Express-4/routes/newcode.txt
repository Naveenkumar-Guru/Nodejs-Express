
import express from "express";
import fs from "fs";
import path from "path";

let router = express.Router();

/*
Create
-------
Usage: Create new employee
API: http://127.0.0.1:8080/emp/create
Method: POST
Body: { eid, ename, esal, loc }
*/
router.post("/create", async (req, resp) => {
  console.log("Inside POST Method");
  let emp = req.body;
  let employees = await getEmployees();

  let employee = employees.find((employee) => employee.eid === emp.eid);
  if (employee) {
    return resp.status(400).json({ msg: "Employee already exists" });
  }

  employees.push(emp);
  await saveEmployees(employees);
  return resp.status(200).json({ msg: "New Employee Created Successfully" });
});

/*
Read
------
Usage: Fetch all employees
API: http://127.0.0.1:8080/emp/read
Method: GET
*/
router.get("/read", async (req, resp) => {
  console.log("Inside GET Method");
  let employees = await getEmployees();
  return resp.status(200).json(employees);
});

/*
Update
-------
Usage: Update existing employee details
API: http://127.0.0.1:8080/emp/update/:eid
Method: PUT
Body: { ename?, esal?, loc? }
*/
router.put("/update/:eid", async (req, resp) => {
  console.log("Inside PUT Method");
  let empId = req.params.eid;
  let newData = req.body;

  let employees = await getEmployees();
  let index = employees.findIndex((emp) => emp.eid == empId);

  if (index === -1) {
    return resp.status(404).json({ msg: "Employee not found" });
  }

  // Merge existing employee data with new data
  employees[index] = { ...employees[index], ...newData };

  await saveEmployees(employees);
  return resp
    .status(200)
    .json({ msg: "Employee updated successfully", employee: employees[index] });
});

/*
Delete
-------
Usage: Delete existing employee
API: http://127.0.0.1:8080/emp/delete/:eid
Method: DELETE
*/
router.delete("/delete/:eid", async (req, resp) => {
  console.log("Inside DELETE Method");
  let empId = req.params.eid;

  let employees = await getEmployees();
  let index = employees.findIndex((emp) => emp.eid == empId);

  if (index === -1) {
    return resp.status(404).json({ msg: "Employee not found" });
  }

  // Remove employee
  employees.splice(index, 1);

  await saveEmployees(employees);
  return resp.status(200).json({ msg: "Employee deleted successfully" });
});

/* Helper Functions */
let getEmployees = () => {
  let emp_file = path.join(process.cwd(), "data", "employees.json");
  let emp_Data = fs.readFileSync(emp_file, "utf-8");
  return JSON.parse(emp_Data);
};

let saveEmployees = (employees) => {
  let emp_file = path.join(process.cwd(), "data", "employees.json");
  fs.writeFileSync(emp_file, JSON.stringify(employees, null, 2));
};

export default router;
